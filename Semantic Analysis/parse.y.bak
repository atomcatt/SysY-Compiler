%{
    #include <stdio.h>
    int yylex(void);
    void yyerror(const char *s);
    extern int lines;
    extern int chars;
%}

%locations

%token INCLUDE
%token CONST
%token INT
%token VOID
%token IF
%token ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token RETURN
%token ASSIGN
%token AND
%token OR
%token EQ
%token LT
%token LE
%token GT
%token GE
%token NE
%token ADD
%token SUB
%token MUL
%token DIV
%token MOD
%token NOT
%token LPAREN
%token RPAREN
%token LBRACE
%token RBRACE
%token LBRACK
%token RBRACK
%token COMMA
%token SEMI
%token HASH
%token <const_string_val> Ident
%token <const_int_val> IntConst
%token <const_string_val> HeaderFile
%token <const_string_val> String
 /*%token <const_int_val> Number*/

%nonassoc IFX
%nonassoc ELSE

 /* %left IF ELSE */
%left OR
%left AND
%left LT LE GT GE EQ NE
%right NOT
%left ADD SUB
%left MUL DIV MOD

%start CompUnit

%union {
    int const_int_val;
    char *const_string_val;
}

%%

CompUnit
:   Decl    //{printf("CompUnit -> Decl\n");}
    {
        printf("Decl -> CompUnit\n");
    
    }
|   FuncDef //{printf("CompUnit -> FuncDef\n");}
    {
        printf("FuncDef -> CompUnit\n");
    }
|   ExternalDef //{printf("CompUnit -> CompUnit ExternalDef\n");}
    {
        printf("ExternalDef -> CompUnit\n");
    }
|   CompUnit Decl //{printf("CompUnit -> CompUnit Decl\n");}
    {
        printf("CompUnit Decl -> CompUnit\n");
    }
|   CompUnit FuncDef //{printf("CompUnit -> CompUnit FuncDef\n");}
    {
        printf("CompUnit FuncDef -> CompUnit\n");
    }
|   CompUnit ExternalDef
    {
        printf("CompUnit ExternalDef -> CompUnit\n");
    }
;

ExternalDef
:   HASH INCLUDE HeaderFile //{printf("ExternalDef -> # INCLUDE < <const_string_val> >\n");}
    {
        printf("# include %s -> ExternalDef\n", $3);
    }
;

Decl
:   ConstDecl   //{printf("Decl -> ConstDecl\n");}
    {
        printf("ConstDecl -> Decl\n");
    }
|   VarDecl //{printf("Decl -> VarDecl\n");}
    {
        printf("VarDecl -> Decl\n");
    }
// |   ExternalDef //{printf("Decl -> ExternalDef\n");}
//     {
//         printf("ExternalDef -> Decl\n");
//     }
;

ConstDecl
:   CONST INT ConstDefList SEMI   //{printf("ConstDecl -> CONST INT ConstDef {COMMA ConstDef} SEMI\n");}
    {
        printf("const int ConstDefList ; -> ConstDecl\n");
    }
//|   CONST INT ConstDef ConstDefList SEMI   {printf("ConstDecl -> ConstDecl COMMA ConstDef SEMI\n");}
;

ConstDefList
:   ConstDef    
    {
        printf("ConstDef -> ConstDefList\n");
    }
|   ConstDefList COMMA ConstDef 
    {
        printf("ConstDef , ConstDef -> ConstDefList\n");
    }
;

/*
BType
:   INT {printf("BType -> INT\n");}
;
*/

ConstDef
:   Ident ASSIGN ConstInitVal   //{printf("ConstDef -> Ident ASSIGN ConstInitVal\n");}
    {
        printf("%s = ConstInitVal -> ConstDef\n", $1);
    }
|   Ident ArrDef ASSIGN ConstInitVal     //{printf("ConstDef -> Ident {LBRACK Exp RBRACK} ASSIGN ConstInitVal\n");}
    {
        printf("%s ArrDef = ConstInitVal -> ConstDef\n", $1);
    }
;

ArrDef
:   LBRACK Exp RBRACK  
    {
        printf("[ Exp ] -> ArrDef\n");
    }
|   ArrDef LBRACK Exp RBRACK   
    {
        printf("ArrDef [ Exp ] -> ArrDef\n");
    }
;

ConstInitVal
:   Exp    //{printf("ConstInitVal -> Exp\n");}
    {
        printf("ConstExp -> ConstInitVal\n");
    
    }
|   LBRACE RBRACE   //{printf("ConstInitVal -> LBRACE RBRACE\n");}
    {
        printf("{ } -> ConstInitVal\n");
    
    }
|   LBRACE ConstInitValList RBRACE  //{printf("ConstInitVal -> LBRACE [COMMA ConstInitVal] RBRACE\n");}
    {
        printf("{ ConstInitValList } -> ConstInitVal\n");
    }
;

ConstInitValList
:   ConstInitVal  
    {
        printf("ConstInitVal -> ConstInitValList\n");
    }
|   ConstInitValList COMMA ConstInitVal   
    {
        printf("ConstInitValList , ConstInitVal -> ConstInitValList\n");
    
    }
;

VarDecl
:   INT VarDefList SEMI  //{printf("VarDecl -> INT VarDef {COMMA VarDef} SEMI\n");}
    {
        printf("int VarDeclList ; -> VarDecl\n");
    }
;

VarDefList
:   VarDef  
    {
        printf("VarDef -> VarDefList\n");
    }
|   VarDefList COMMA VarDef   
    {
        printf("VarDef , VarDef -> VarDefList\n");
    }
;

VarDef
:   Ident   //{printf("VarDef -> Ident\n");}
    {
        printf("%s -> VarDef\n", $1);
    }
|   Ident ASSIGN InitVal    //{printf("VarDef -> Ident ASSIGN InitVal\n");}
    {
        printf("%s = InitVal -> VarDef\n", $1);
    }
|   Ident ArrDef    //{printf("VarDef -> Ident {LBRACK Exp RBRACK}\n");}
    {
        printf("%s ArrDef -> VarDef\n", $1);
    }
|   Ident ArrDef ASSIGN InitVal  //{printf("VarDef -> Ident {LBRACK Exp RBRACK} ASSIGN InitVal\n");}
    {
        printf("%s Arrdef = InitVal -> VarDef\n", $1);
    }
;



InitVal
:   Exp //{printf("InitVal -> Exp\n");}
    {
        printf("Exp -> InitVal\n");
    }
|   LBRACE RBRACE   //{printf("InitVal -> LBRACE RBRACE\n");}
    {
        printf("{ } -> InitVal\n");
    }
|   LBRACE InitValList RBRACE  //{printf("InitVal -> LBRACE [InitVal {COMMA InitVal}] RBRACE\n");}
    {
        printf("{ InitValList } -> InitVal\n");
    }
;

InitValList
:   InitVal   
    {
        printf("InitVal -> InitValList\n");
    }
|   InitValList COMMA InitVal  //{printf("InitValList -> InitValList COMMA InitVal\n");}
    {
        printf("InitValList , InitVal -> InitValList\n");
    }
;

FuncDef
:   VOID Ident LPAREN RPAREN Block  //{printf("FuncDef -> VOID Ident LPAREN RPAREN Block\n");}
    {
        printf("void %s ( ) Block -> FuncDef\n", $2);
    }
|   INT Ident LPAREN RPAREN Block  //{printf("FuncDef -> INT Ident LPAREN RPAREN Block\n");}
    {
        printf("int %s ( ) Block -> FuncDef\n", $2);
    }
|   VOID Ident LPAREN FuncFParams RPAREN Block  //{printf("VOID -> FuncType Ident LPAREN FuncFParams RPAREN Block\n");}
    {
        printf("void %s ( FuncFParams ) Block -> FuncDef\n", $2);
    }
|   INT Ident LPAREN FuncFParams RPAREN Block  //{printf("INT -> FuncType Ident LPAREN FuncFParams RPAREN Block\n");}
    {
        printf("int %s ( FuncFParams ) Block -> FuncDef\n", $2);
    }
;

/*
FuncType
:   VOID    {printf("FuncType -> VOID\n");}
|   INT {printf("FuncType -> INT\n");}
;
*/

FuncFParams
:   FuncFParam  //{printf("FuncFParams -> FuncFParam\n");}
    {
        printf("FuncFParam -> FuncFParams\n");
    }
|   FuncFParams COMMA FuncFParam    //{printf("FuncFParams -> FuncFParam {COMMA FuncFParam}\n");}
    {
        printf("FuncFParams , FuncFParam -> FuncFParams\n");
    }
;

FuncFParam
:   INT Ident //{printf("FuncFParam -> INT Ident\n");}
    {
        printf("int %s -> FuncFParam\n", $2);
    }
|   INT Ident LBRACK RBRACK   //{printf("FuncFParam -> INT Ident [LBRACK RBRACK {LBRACK Exp RBRACK}]\n");}
    {
        //printf("INT Ident [LBRACK RBRACK {LBRACK Exp RBRACK}] -> FuncFParam\n");
        printf("int %s [ ] -> FuncFParam\n", $2);
    }
|   INT Ident LBRACK RBRACK ArrDef //{printf("FuncFParam -> INT Ident [LBRACK RBRACK {LBRACK Exp RBRACK}]\n");}
    {
        //printf("INT Ident [LBRACK RBRACK {LBRACK Exp RBRACK}] -> FuncFParam\n");
        printf("int %s [ ] ArrDef -> FuncFParam\n", $2);
    }
;

Block
:   LBRACE RBRACE   //{printf("Block -> LBRACE RBRACE\n");}
    {
        //printf("LBRACE RBRACE -> Block\n");
        printf("{ } -> Block\n");
    }
|   LBRACE BlockGroup RBRACE //{printf("Block -> LBRACE {BlockItem} RBRACE\n");}
    {
        //printf("LBRACE {BlockItem} RBRACE -> Block\n");
        printf("{ BlockGroup } -> Block\n");
    }
;

BlockGroup
:   BlockItem   //{printf("BlockGroup -> BlockItem\n");}
    {
        printf("BlockItem -> BlockGroup\n");
    }
|   BlockGroup BlockItem    //{printf("BlockGroup -> BlockGroup BlockItem\n");}
    {
        printf("BlockGroup BlockItem -> BlockGroup\n");
    }
;

BlockItem
:   Decl    //{printf("BlockItem -> Decl\n");}
    {
        printf("Decl -> BlockItem\n");
    }
|   Stmt    //{printf("BlockItem -> Stmt\n");}
    {
        printf("Stmt -> BlockItem\n");
    
    }
;

Stmt
:   LVal ASSIGN Exp SEMI    //{printf("Stmt -> LVal ASSIGN Exp SEMI\n");}
    {
        printf("LVal = Exp ; -> Stmt\n");
    
    }
|   SEMI    //{printf("Stmt -> SEMI\n");}
    {
        printf("; -> Stmt\n");
    }
|   Exp SEMI       //{printf("Stmt -> Exp SEMI\n");}
    {
        printf("Exp ; -> Stmt\n");
    }
|   Block   //{printf("Stmt -> Block\n");}
    {
        printf("Block -> Stmt\n");
    }
|   IF LPAREN Cond RPAREN Stmt %prec IFX//{printf("Stmt -> IF LPAREN Cond RPAREN Stmt\n");}
    {
        printf("if ( Cond ) Stmt -> Stmt\n");
    }
|   IF LPAREN Cond RPAREN Stmt ELSE Stmt    //{printf("Stmt -> IF LPAREN Cond RPAREN Stmt ELSE Stmt\n");}
    {
        //printf("IF LPAREN Cond RPAREN Stmt ELSE Stmt -> Stmt\n");
        printf("if ( Cond ) Stmt else Stmt -> Stmt\n");
    }
|   WHILE LPAREN Cond RPAREN Stmt   //{printf("Stmt -> WHILE LPAREN Cond RPAREN Stmt\n");}
    {
        //printf("WHILE LPAREN Cond RPAREN Stmt -> Stmt\n");
        printf("while ( Cond ) Stmt -> Stmt\n");
    }
|   BREAK SEMI  //{printf("Stmt -> BREAK SEMI\n");}
    {
        //printf("BREAK SEMI -> Stmt\n");
        printf("break ; -> Stmt\n");
    }
|   CONTINUE SEMI   //{printf("Stmt -> CONTINUE SEMI\n");}
    {
        //printf("CONTINUE SEMI -> Stmt\n");
        printf("continue ; -> Stmt\n");
    }
|   RETURN SEMI //{printf("Stmt -> RETURN SEMI\n");}
    {
        //printf("RETURN SEMI -> Stmt\n");
        printf("return ; -> Stmt\n");
    }
|   RETURN Exp SEMI //{printf("Stmt -> RETURN Exp SEMI\n");}
    {
        //printf("RETURN Exp SEMI -> Stmt\n");
        printf("return Exp ; -> Stmt\n");
    }
;



Exp
:   AddExp  //{printf("Exp -> AddExp\n");}
    {
        printf("AddExp -> Exp\n");
    }
;

Cond
:   LOrExp   //{printf("Cond -> LOrExp\n");}
    {
        printf("LOrExp -> Cond\n");
    }
;

LVal
:   Ident   //{printf("LVal -> Ident\n");}
    {
        printf("%s -> LVal\n", $1);
    }
|   Ident ArrDef    //{printf("LVal -> Ident {LBRACK Exp RBRACK}\n");}
    {
        //printf("Ident {LBRACK Exp RBRACK} -> LVal\n");
        printf("Ident ArrDef -> LVal\n");
    }
;

PrimaryExp
:   LPAREN Exp RPAREN   //{printf("PrimaryExp -> LPAREN Exp RPAREN\n");}
    {
        //printf("LPAREN Exp RPAREN -> PrimaryExp\n");
        printf("( Exp ) -> PrimaryExp\n");
    
    }
|   LVal    //{printf("PrimaryExp -> LVal\n");}
    {
        printf("LVal -> PrimaryExp\n");
    }
|   IntConst  //{printf("PrimaryExp -> Number\n");}
    {
        printf("%d -> PrimaryExp\n", $1);
    }
;

// Number
// :   IntConst    //{printf("Number -> IntConst\n");}
// ;

UnaryExp
:   PrimaryExp  //{printf("UnaryExp -> PrimaryExp\n");}
    {
        printf("PrimaryExp -> UnaryExp\n");
    }
|   Ident LPAREN RPAREN   //{printf("UnaryExp -> Ident LPAREN RPAREN\n");}
    {
        //printf("Ident LPAREN RPAREN -> UnaryExp\n");
        printf("%s ( ) -> UnaryExp\n", $1);
    }
|   Ident LPAREN FuncRParams RPAREN  //{printf("UnaryExp -> Ident LPAREN FuncRParams RPAREN\n");}
    {
        //printf("Ident LPAREN FuncRParams RPAREN -> UnaryExp\n");
        printf("%s ( FuncRParams ) -> UnaryExp\n", $1);
    }
|   UnaryOp UnaryExp    //{printf("UnaryExp -> UnaryOp UnaryExp\n");}
    {
        printf("UnaryOp UnaryExp -> UnaryExp\n");
    }
// |   Ident LPAREN argument_expression_list RPAREN
//     {
//         printf("%s ( argument_expression_list ) -> UnaryExp\n", $1);
//     }
;

// argument_expression_list
// :   FuncRParams
//     {
//         printf("FuncRParams -> argument_expression_list\n");
//     }
// |   String COMMA FuncRParams
//     {
//         printf("String , assignment_expression -> argument_expression_list\n");
//     }
// ;

UnaryOp
:   ADD //{printf("UnaryOp -> ADD\n");}
    {
        //printf("ADD -> UnaryOp\n");
        printf("+ -> UnaryOp\n");
    }
|   SUB //{printf("UnaryOp -> SUB\n");}
    {
        //printf("SUB -> UnaryOp\n");
        printf("- -> UnaryOp\n");
    }
|   NOT //{printf("UnaryOp -> NOT\n");}
    {
        //printf("NOT -> UnaryOp\n");
        printf("! -> UnaryOp\n");
    }
;

FuncRParams
:   Exp //{printf("FuncRParams -> Exp\n");}
    {
        printf("Exp -> FuncRParams\n");
    }
|   Exp FuncRParamsList    //{printf("FuncRParams -> Exp {COMMA Exp}\n");}
    {
        //printf("Exp {COMMA Exp} -> FuncRParams\n");
        printf("Exp FuncRParamsList -> FuncRParams\n");
    }
|   String FuncRParamsList
    {
        printf("%s FuncRParamsList -> FuncRParams\n", $1);
    }
;

FuncRParamsList
:   COMMA Exp   //{printf("FuncRParamsList -> COMMA Exp\n");}
    {
        printf(", Exp -> FuncRParamsList\n");
    }  
|   FuncRParamsList COMMA Exp  //{printf("FuncRParamsList -> FuncRParamsList COMMA Exp\n");}
    {
        printf("FuncRParamsList , Exp -> FuncRParamsList\n");
    }
;

MulExp
:   UnaryExp    //{printf("MulExp -> UnaryExp\n");}
    {
        printf("UnaryExp -> MulExp\n");
    
    }
|   MulExp MUL UnaryExp   //{printf("MulExp -> MulExp MUL UnaryExp\n");}
    {
        //printf("MulExp MUL UnaryExp -> MulExp\n");
        printf("MulExp * UnaryExp -> MulExp\n");
    }
|   MulExp DIV UnaryExp  //{printf("MulExp -> MulExp DIV UnaryExp\n");}
    {
        //printf("MulExp DIV UnaryExp -> MulExp\n");
        printf("MulExp / UnaryExp -> MulExp\n");
    }
|   MulExp MOD UnaryExp //{printf("MulExp -> MulExp MOD UnaryExp\n");}
    {
        //printf("MulExp MOD UnaryExp -> MulExp\n");
        printf("MulExp %% UnaryExp -> MulExp\n");
    }
;

AddExp
:   MulExp  //{printf("AddExp -> MulExp\n");}
    {
        printf("MulExp -> AddExp\n");
    
    }
|   AddExp ADD MulExp   //{printf("AddExp -> AddExp ADD MulExp\n");}
    {
        //printf("AddExp ADD MulExp -> AddExp\n");
        printf("AddExp + MulExp -> AddExp\n");
    }
|   AddExp SUB MulExp   //{printf("AddExp -> AddExp SUB MulExp\n");}
    {
        //printf("AddExp SUB MulExp -> AddExp\n");
        printf("AddExp - MulExp -> AddExp\n");
    }
;

RelExp
:   AddExp  //{printf("RelExp -> AddExp\n");}
    {
        printf("AddExp -> RelExp\n");
    }
|   RelExp LT AddExp    //{printf("RelExp -> RelExp LT AddExp\n");}
    {
        //printf("RelExp LT AddExp -> RelExp\n");
        printf("RelExp < AddExp -> RelExp\n");
    }
|   RelExp LE AddExp    //{printf("RelExp -> RelExp LE AddExp\n");}
    {
        //printf("RelExp LE AddExp -> RelExp\n");
        printf("RelExp <= AddExp -> RelExp\n");
    }
|   RelExp GT AddExp    //{printf("RelExp -> RelExp GT AddExp\n");}
    {
        //printf("RelExp GT AddExp -> RelExp\n");
        printf("RelExp > AddExp -> RelExp\n");
    }
|   RelExp GE AddExp    //{printf("RelExp -> RelExp GE AddExp\n");}
    {
        //printf("RelExp GE AddExp -> RelExp\n");
        printf("RelExp >= AddExp -> RelExp\n");
    }
;

EqExp
:   RelExp  //{printf("EqExp -> RelExp\n");}
    {
        printf("RelExp -> EqExp\n");
    }
|   EqExp EQ RelExp //{printf("EqExp -> EqExp EQ RelExp\n");}
    {
        //printf("EqExp EQ RelExp -> EqExp\n");
        printf("EqExp == RelExp -> EqExp\n");
    }
|   EqExp NE RelExp //{printf("EqExp -> EqExp NE RelExp\n");}
    {
        //printf("EqExp NE RelExp -> EqExp\n");
        printf("EqExp != RelExp -> EqExp\n");
    }
;

LAndExp
:   EqExp   //{printf("LAndExp -> EqExp\n");}
    {
        printf("EqExp -> LAndExp\n");
    }
|   LAndExp AND EqExp   //{printf("LAndExp -> LAndExp AND EqExp\n");}
    {
        //printf("LAndExp AND EqExp -> LAndExp\n");
        printf("LAndExp && EqExp -> LAndExp\n");
    }
;

LOrExp
:   LAndExp   //{printf("LOrExp -> LAndExp\n");}
    {
        printf("LAndExp -> LOrExp\n");
    }
|   LOrExp OR LAndExp   //{printf("LOrExp -> LOrExp OR LAndExp\n");}
    {
        //printf("LOrExp OR LAndExp -> LOrExp\n");
        printf("LOrExp || LAndExp -> LOrExp\n");
    }
;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s at line %d, column %d\n", s, lines, chars);
}

int main() {
    yyparse();
    return 0;
}