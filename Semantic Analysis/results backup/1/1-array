# include <stdio.h> -> ExternalDef
ExternalDef -> CompUnit
int x -> FuncFParam
FuncFParam -> FuncFParams
int y -> FuncFParam
FuncFParams , FuncFParam -> FuncFParams
int z -> FuncFParam
FuncFParams , FuncFParam -> FuncFParams
z -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
{ BlockGroup } -> Block
int func ( FuncFParams ) Block -> FuncDef
CompUnit FuncDef -> CompUnit
4 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
[ ConstExp ] -> ConstDefGroup
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ConstDefGroup [ ConstExp ] -> ConstDefGroup
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ConstExp -> ConstInitVal
ConstInitVal -> ConstInitValGroup
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ConstExp -> ConstInitVal
ConstInitValGroup , ConstInitVal -> ConstInitValGroup
{ ConstInitValGroup } -> ConstInitVal
ConstInitVal -> ConstInitValGroup
3 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ConstExp -> ConstInitVal
ConstInitVal -> ConstInitValGroup
4 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ConstExp -> ConstInitVal
ConstInitValGroup , ConstInitVal -> ConstInitValGroup
{ ConstInitValGroup } -> ConstInitVal
ConstInitValGroup , ConstInitVal -> ConstInitValGroup
{ } -> ConstInitVal
ConstInitValGroup , ConstInitVal -> ConstInitValGroup
7 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ConstExp -> ConstInitVal
ConstInitValGroup , ConstInitVal -> ConstInitValGroup
{ ConstInitValGroup } -> ConstInitVal
a ConstDefGroup = ConstInitVal -> ConstDef
ConstDef -> ConstDefList
const int ConstDefList ; -> ConstDecl
ConstDecl -> Decl
Decl -> BlockItem
BlockItem -> BlockGroup
3 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ConstExp -> ConstInitVal
N = ConstInitVal -> ConstDef
ConstDef -> ConstDefList
const int ConstDefList ; -> ConstDecl
ConstDecl -> Decl
Decl -> BlockItem
BlockGroup BlockItem -> BlockGroup
4 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
[ ConstExp ] -> ArrDef
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ArrDef [ ConstExp ] -> ArrDef
{ } -> InitVal
b Arrdef = InitVal -> VarDef
VarDef -> VarDeclGroup
int VarDeclGroup ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockGroup BlockItem -> BlockGroup
4 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
[ ConstExp ] -> ArrDef
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ArrDef [ ConstExp ] -> ArrDef
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValGroup
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
3 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
4 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
5 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
6 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
7 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
8 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
{ InitValGroup } -> InitVal
c Arrdef = InitVal -> VarDef
VarDef -> VarDeclGroup
int VarDeclGroup ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockGroup BlockItem -> BlockGroup
N -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> ConstExp
[ ConstExp ] -> ArrDef
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ArrDef [ ConstExp ] -> ArrDef
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValGroup
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
3 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValGroup
{ InitValGroup } -> InitVal
InitValGroup , InitVal -> InitValGroup
5 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValGroup
{ InitValGroup } -> InitVal
InitValGroup , InitVal -> InitValGroup
3 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> Arr
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
Ident Arr -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
8 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
{ InitValGroup } -> InitVal
d Arrdef = InitVal -> VarDef
VarDef -> VarDeclGroup
int VarDeclGroup ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockGroup BlockItem -> BlockGroup
4 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
[ ConstExp ] -> ArrDef
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ArrDef [ ConstExp ] -> ArrDef
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> ConstExp
ArrDef [ ConstExp ] -> ArrDef
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> Arr
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
Ident Arr -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValGroup
2 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> Arr
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
Ident Arr -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValGroup
{ InitValGroup } -> InitVal
InitValGroup , InitVal -> InitValGroup
{ InitValGroup } -> InitVal
InitVal -> InitValGroup
3 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValGroup
4 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
{ InitValGroup } -> InitVal
InitValGroup , InitVal -> InitValGroup
5 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValGroup
6 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
{ InitValGroup } -> InitVal
InitValGroup , InitVal -> InitValGroup
7 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValGroup
8 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitValGroup , InitVal -> InitValGroup
{ InitValGroup } -> InitVal
InitValGroup , InitVal -> InitValGroup
{ InitValGroup } -> InitVal
e Arrdef = InitVal -> VarDef
VarDef -> VarDeclGroup
int VarDeclGroup ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockGroup BlockItem -> BlockGroup
3 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> Arr
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
Ident Arr -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> Arr
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
Ident Arr -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> Arr
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
Ident Arr -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
3 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> Arr
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Arr [ Exp ] -> Arr
Ident Arr -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
, Exp -> FuncRParamsGroup
"%d\n" FuncRParamsGroup -> FuncRParams
printf ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
int main ( ) Block -> FuncDef
CompUnit FuncDef -> CompUnit
