# include <stdio.h> -> ExternalDef
ExternalDef -> CompUnit
int a -> FuncFParam
FuncFParam -> FuncFParams
int b -> FuncFParam
FuncFParams , FuncFParam -> FuncFParams
int x [ ] -> FuncFParam
FuncFParams , FuncFParam -> FuncFParams
int y [ ] -> FuncFParam
FuncFParams , FuncFParam -> FuncFParams
b -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
EqExp == RelExp -> EqExp
EqExp -> LAndExp
LAndExp -> LOrExp
LOrExp -> Cond
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
a -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
b -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
a -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
b -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
MulExp % UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
, Exp -> FuncRParamsList
x -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
FuncRParamsList , Exp -> FuncRParamsList
y -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
FuncRParamsList , Exp -> FuncRParamsList
Exp FuncRParamsList -> FuncRParams
exgcd ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
r = InitVal -> VarDef
VarDef -> VarDefList
int VarDeclList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
t = InitVal -> VarDef
VarDef -> VarDefList
int VarDeclList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockGroup BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
t -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
a -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
b -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
MulExp / UnaryExp -> MulExp
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
MulExp * UnaryExp -> MulExp
AddExp - MulExp -> AddExp
AddExp -> Exp
( Exp ) -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
r -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
if ( Cond ) Stmt else Stmt -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
{ BlockGroup } -> Block
int exgcd ( FuncFParams ) Block -> FuncDef
CompUnit FuncDef -> CompUnit
7 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
a = InitVal -> VarDef
VarDef -> VarDefList
15 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
b = InitVal -> VarDef
VarDef , VarDef -> VarDefList
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValList
{ InitValList } -> InitVal
x Arrdef = InitVal -> VarDef
VarDef , VarDef -> VarDefList
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
InitVal -> InitValList
{ InitValList } -> InitVal
y Arrdef = InitVal -> VarDef
VarDef , VarDef -> VarDefList
int VarDeclList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockItem -> BlockGroup
a -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
b -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
, Exp -> FuncRParamsList
x -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
FuncRParamsList , Exp -> FuncRParamsList
y -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
FuncRParamsList , Exp -> FuncRParamsList
Exp FuncRParamsList -> FuncRParams
exgcd ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
b -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
MulExp % UnaryExp -> MulExp
MulExp -> AddExp
b -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
( Exp ) -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
b -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
MulExp % UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
, Exp -> FuncRParamsList
"%d\n" FuncRParamsList -> FuncRParams
printf ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
int main ( ) Block -> FuncDef
CompUnit FuncDef -> CompUnit
