# include <stdio.h> -> ExternalDef
ExternalDef -> CompUnit
int str [ ] -> FuncFParam
FuncFParam -> FuncFParams
int next [ ] -> FuncFParam
FuncFParams , FuncFParam -> FuncFParams
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
-1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
i = InitVal -> VarDef
VarDef -> VarDefList
-1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
j = InitVal -> VarDef
VarDef , VarDef -> VarDefList
int VarDeclList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockGroup BlockItem -> BlockGroup
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
EqExp -> LAndExp
LAndExp -> LOrExp
LOrExp -> Cond
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
-1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
EqExp == RelExp -> EqExp
EqExp -> LAndExp
LAndExp -> LOrExp
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
EqExp == RelExp -> EqExp
EqExp -> LAndExp
LOrExp || LAndExp -> LOrExp
LOrExp -> Cond
j -> LVal
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
i -> LVal
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
j -> LVal
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
if ( Cond ) Stmt else Stmt -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
while ( Cond ) Stmt -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
void get_next ( FuncFParams ) Block -> FuncDef
CompUnit FuncDef -> CompUnit
int dst [ ] -> FuncFParam
FuncFParam -> FuncFParams
int src [ ] -> FuncFParam
FuncFParams , FuncFParam -> FuncFParams
4096 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
next ArrDef -> VarDef
VarDef -> VarDefList
int VarDeclList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockItem -> BlockGroup
dst -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
next -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
, Exp -> FuncRParamsList
Exp FuncRParamsList -> FuncRParams
get_next ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
i = InitVal -> VarDef
VarDef -> VarDefList
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
j = InitVal -> VarDef
VarDef , VarDef -> VarDefList
int VarDeclList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockGroup BlockItem -> BlockGroup
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
EqExp -> LAndExp
LAndExp -> LOrExp
LOrExp -> Cond
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
EqExp == RelExp -> EqExp
EqExp -> LAndExp
LAndExp -> LOrExp
LOrExp -> Cond
i -> LVal
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
j -> LVal
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
! -> UnaryOp
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryOp UnaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
EqExp -> LAndExp
LAndExp -> LOrExp
LOrExp -> Cond
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
if ( Cond ) Stmt -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
i -> LVal
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
-1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
EqExp == RelExp -> EqExp
EqExp -> LAndExp
LAndExp -> LOrExp
LOrExp -> Cond
i -> LVal
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
j -> LVal
j -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
if ( Cond ) Stmt -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
if ( Cond ) Stmt else Stmt -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
while ( Cond ) Stmt -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
-1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
int KMP ( FuncFParams ) Block -> FuncDef
CompUnit FuncDef -> CompUnit
int buf [ ] -> FuncFParam
FuncFParam -> FuncFParams
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> InitVal
i = InitVal -> VarDef
VarDef -> VarDefList
int VarDeclList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockItem -> BlockGroup
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
EqExp -> LAndExp
LAndExp -> LOrExp
LOrExp -> Cond
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
, Exp -> FuncRParamsList
"%c" FuncRParamsList -> FuncRParams
scanf ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp ; -> Stmt
Stmt -> BlockItem
BlockItem -> BlockGroup
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
RelExp -> EqExp
10 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> RelExp
EqExp == RelExp -> EqExp
EqExp -> LAndExp
LAndExp -> LOrExp
LOrExp -> Cond
break ; -> Stmt
if ( Cond ) Stmt -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
i -> LVal
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
1 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
AddExp + MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
Block -> Stmt
while ( Cond ) Stmt -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
Ident ArrDef -> LVal
0 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
LVal = Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
i -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
int read_str ( FuncFParams ) Block -> FuncDef
CompUnit FuncDef -> CompUnit
4096 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
dst ArrDef -> VarDef
VarDef -> VarDefList
4096 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
[ Exp ] -> ArrDef
src ArrDef -> VarDef
VarDef , VarDef -> VarDefList
int VarDeclList ; -> VarDecl
VarDecl -> Decl
Decl -> BlockItem
BlockItem -> BlockGroup
dst -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> FuncRParams
read_str ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
src -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp -> FuncRParams
read_str ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
dst -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
src -> LVal
LVal -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
, Exp -> FuncRParamsList
Exp FuncRParamsList -> FuncRParams
KMP ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
, Exp -> FuncRParamsList
"%d\n" FuncRParamsList -> FuncRParams
printf ( FuncRParams ) -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
8 -> PrimaryExp
PrimaryExp -> UnaryExp
UnaryExp -> MulExp
MulExp -> AddExp
AddExp -> Exp
return Exp ; -> Stmt
Stmt -> BlockItem
BlockGroup BlockItem -> BlockGroup
{ BlockGroup } -> Block
int main ( ) Block -> FuncDef
CompUnit FuncDef -> CompUnit
